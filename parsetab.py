
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftCONDBICONDAND BICOND BOOL COND EQUALS NAME OR\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : NAME EQUALS expression\n    \n    expression : expression COND expression\n               | expression BICOND expression\n               | expression AND expression\n               | expression OR expression\n    \n    expression : BOOL\n    \n    expression : NAME\n    \n    empty :\n    '
    
_lr_action_items = {'BOOL':([0,7,8,9,10,11,],[5,5,5,5,5,5,]),'NAME':([0,7,8,9,10,11,],[6,13,13,13,13,13,]),'$end':([0,1,2,3,4,5,6,12,13,14,15,16,17,],[-11,0,-1,-2,-3,-9,-10,-5,-10,-6,-7,-8,-4,]),'COND':([2,5,6,12,13,14,15,16,17,],[7,-9,-10,-5,-10,-6,7,7,7,]),'BICOND':([2,5,6,12,13,14,15,16,17,],[8,-9,-10,-5,-10,-6,8,8,8,]),'AND':([2,5,6,12,13,14,15,16,17,],[9,-9,-10,-5,-10,-6,-7,-8,9,]),'OR':([2,5,6,12,13,14,15,16,17,],[10,-9,-10,-5,-10,-6,-7,-8,10,]),'EQUALS':([6,],[11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,7,8,9,10,11,],[2,12,14,15,16,17,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','prologic.py',65),
  ('calc -> var_assign','calc',1,'p_calc','prologic.py',66),
  ('calc -> empty','calc',1,'p_calc','prologic.py',67),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','prologic.py',73),
  ('expression -> expression COND expression','expression',3,'p_expression','prologic.py',81),
  ('expression -> expression BICOND expression','expression',3,'p_expression','prologic.py',82),
  ('expression -> expression AND expression','expression',3,'p_expression','prologic.py',83),
  ('expression -> expression OR expression','expression',3,'p_expression','prologic.py',84),
  ('expression -> BOOL','expression',1,'p_expression_bool','prologic.py',91),
  ('expression -> NAME','expression',1,'p_expression_var','prologic.py',97),
  ('empty -> <empty>','empty',0,'p_empty','prologic.py',109),
]
