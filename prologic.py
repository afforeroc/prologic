import ply.lex as lex
import ply.yacc as yacc
import sys

# Create a list to hold all of the token names
tokens = [
    'BOOL',
    'NAME',
    'AND',
    'OR',
    'COND',
    'BICOND',
    'EQUALS'
]

# Use regular expressions to define what each token is
t_AND = r'\&'
t_OR = r'\|'
t_COND = r'\->'
t_BICOND = r'\<->'
t_EQUALS = r'\='

# Ply's special t_ignore variable allows us to define characters the lexer will ignore.
# We're ignoring spaces.
t_ignore = r' '

# More complicated tokens, such as tokens that are more than 1 character in length
# are defined using functions.

# An int is 1 or more numbers.
def t_BOOL(t):
    r'(F|T)'
    if t.value == 'F':
        t.value = False
    else:
        t.value = True
    return t

# A NAME is a variable name. A variable can be 1 or more characters in length.
# The first character must be in the ranges a-z A-Z or be an underscore.
# Any character following the first character can be a-z A-Z 0-9 or an underscore.
def t_NAME(t):
    r'(?!(F|T))[a-zA-Z_][a-zA-Z_0-9]*'
    t.type = 'NAME'
    return t

# Skip the current token and output 'Illegal characters' using the special Ply t_error function.
def t_error(t):
    print("Illegal characters!")
    t.lexer.skip(1)

# Build the lexer
lexer = lex.lex()

# Ensure our parser understands the correct order of operations.
# The precedence variable is a special Ply variable.

precedence = (
    ('left', 'BICOND'),
    ('left', 'COND'),
    ('left', 'OR'),
    ('left', 'AND')
)

# Define our grammar. We allow expressions, var_assign's and empty's.
def p_calc(p):
    '''
    calc : expression
         | var_assign
         | empty
    '''
    print(boolToChar(run(p[1])))

def p_var_assign(p):
    '''
    var_assign : NAME EQUALS expression
    '''
    # Build our tree
    p[0] = ('=', p[1], p[3])

# Expressions are recursive.
def p_expression(p):
    '''
    expression : expression BICOND expression
               | expression COND expression
               | expression OR expression
               | expression AND expression
    '''
    # Build our tree.
    p[0] = (p[2], p[1], p[3])

def p_expression_bool(p):
    '''
    expression : BOOL
    '''
    p[0] = p[1]

def p_expression_var(p):
    '''
    expression : NAME
    '''
    p[0] = ('var', p[1])

# Output to the user that there is an error in the input as it doesn't conform to our grammar.
# p_error is another special Ply function.
def p_error(p):
    print("Syntax error found!")
    #exit(0)

def p_empty(p):
    '''
    empty :
    '''
    p[0] = None

# My map
def boolToChar(boolean):
    if boolean == True:
        return 'T'
    else:
        return 'F'

# Build the parser
parser = yacc.yacc()
# Create the environment upon which we will store and retreive variables from.
env = {}
# The run function is our recursive function that 'walks' the tree generated by our parser.
def run(p):
    global env
    if type(p) == tuple:
        if p[0] == '&':
            return run(p[1]) and run(p[2])
        elif p[0] == '|':
            return run(p[1]) or run(p[2])
        elif p[0] == '->':
            return not run(p[1]) or run(p[2])
        elif p[0] == '<->':
            return (not run(p[1]) or run(p[2])) and (not run(p[2]) or run(p[1]))
        elif p[0] == '=':
            env[p[1]] = run(p[2])
            return ''
        elif p[0] == 'var':
            if p[1] not in env:
                return 'Undeclared variable found!'
            else:
                return env[p[1]]
    else:
        return p

# Create a REPL to provide a way to interface with our calculator.
while True:
    try:
        s = input('>> ')
    except EOFError:
        break
    parser.parse(s)